name: Deploy Spring Boot to Remote Server

on:
  push:
    branches:
      - main  # This workflow runs on push to the main branch (adjust as needed)

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      
      # Step 1: Checkout the code from GitHub
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Java (install OpenJDK)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Use Java 17
          distribution: 'adoptium'  # Use AdoptOpenJDK's successor 'Adoptium'

      # Step 3: Build the Spring Boot application with Maven
      - name: Build with Maven
        run: mvn clean install -DskipTests  # Skips tests for faster build (remove -DskipTests if you want to run tests)

      # Step 4: Upload the generated .jar file to the server
      - name: Upload .jar file via SCP
        run: |
          scp -o StrictHostKeyChecking=no target/events-microservice-0.0.1-SNAPSHOT.jar user@your-server-ip:/home/ubuntu/testdemo/app/
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Use SSH private key stored in GitHub Secrets

      # Step 5: SSH into the server and start app with PM2
      - name: SSH into remote server and start app with PM2
        run: |
          ssh -o StrictHostKeyChecking=no user@your-server-ip << 'EOF'
            # Navigate to the directory where the code is located
            cd /home/ubuntu/testdemo
            # Stop the running PM2 process for the app if it exists
            pm2 stop events-microservice || true
            # Start the Spring Boot app with PM2
            pm2 start /home/ubuntu/testdemo/app/events-microservice-0.0.1-SNAPSHOT.jar --name "events-microservice" -- -jar /home/ubuntu/testdemo/app/events-microservice-0.0.1-SNAPSHOT.jar
            # Save the PM2 process list for future restarts
            pm2 save
          EOF
